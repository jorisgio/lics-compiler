

/* inverseur */
Invert <- (a,b,ainvert,binvert)
     a1 = MUX(ainvert, a, NOT a);
     b1 = MUX(binvert, b, NOT b);
     ->(a1,b1)

/* 8 to 1 multiplexer, contrôle sur 3 bits, 8 entrées 1bit */ 

Mux8to1 <- (control[3],inputs[8])
	n0 = MUX(control[0],inputs[0],inputs[1]);
	n1 = MUX(control[0],inputs[2],inputs[3]);
	n2 = MUX(control[0],inputs[4],inputs[5]);
	n3 = MUX(control[0],inputs[6],inputs[7]);
	s = MUX(control[2],MUX(control[1],n0,n1),MUX(control[1],n2,n3));
-> (s) 
 

Mux4t1 <- (control[2],inputs[4])
       s = MUX(control[1],MUX(control[0],inputs[0],inputs[1]),MUX(control[0],inputs[2],inputs[3]));
-> (s)

Mux32to1 <- (control[5],inputs[32]) 
	 array mux1[1];
	 array mux2[1];
	 array mux3[1];
	 array mux4[];
	 array s[1];
	 mux1[0..0] = Mux8to1<-(control[0..2],inputs[0..7]);
	 mux2[0..0] = Mux8to1<-(control[0..2],inputs[8..15]);
	 mux3[0..0] = Mux8to1<-(control[0..2],inputs[16..23]);
	 mux4[0..0] = Mux8to1<-(control[0..2],inputs[24..31]);
	 s[0..0] = Mux4to1<-(control[3..4],mux1[0],mux2[0],mux3[0],mux4[0]);
-> (s[0])

/* il faut maintenant des entrées 32 bits */

Mux32to1s32 <- (control[5],inputs[1024]) 
	    array s[32];
	    for(i,0,31) {
	    	
	        s[i..i] = Mux32to1(control[0..4],inputs[)..(31 * i+1)]);
		}
-> (s[0..31])

/* décodeurs */

Demux1to2 <-(a)
	  s1 = NOT a;
	  s2 = a;
-> (s1,s2)

Demux2to4 <-(a,b) 
	  a1 = NOT a;
	  b1 = NOT b;
	  d0 = a1 AND b1;
	  d1 = a AND b1;
	  d2 = a1 AND b;
	  d3 = a AND b ;
-> (d0,d1,d2,d3)

Demux3to8decoder

/* Additionneurs */

Fulladder <-(a,b,c)
	t1 = a xor b;
	s = t1 xor c;
	t2 = a && b;
	t3 = t1 && c;
	r = t2 || t3;
->(s,r)

/* Additionneur 32 bits série */
   
Adder32 <- (a[32],b[32],carryIn) 
	array s[32];
	array r[33];
	r[0] = carryIn AND true;
	for(i,0,31) {
	    array out[2];
	    out[0..1] = Fulladder(a[i],b[i],r[j]);
	    s[i] = out[0] AND true;
	    r[i+1] = out[1] AND true;
	    }
/* on gère pas les overflow */
-> (s,r[32])



/* Choisit l'opération effectuée par l'ALU */
Opmultiplexor <-(op[4], inputs[4])
	result = MUX(


/* registre 32 bits */
Reg32 <-(inputs[32])
      array result[32];
      for(i, 0, 31) {
      	     result[i] = REG inputs[i];
	}
-> (result)

/* Unité registres */

Regs <-(datasIn[32],writeReg[5],readReg1[5],readReg2[5],controlWrite,controlWrite) 
     array regs[1024];
     array control[32];
     array dat[32];
     /* Ecriture des registres */ 
     control[0..31] = Demux5to32s1bit <- (writeReg[0..4]);
     for(i,0,31) {
     		 /* on vérifie si on doit écrire dans ce registre */
     		 w = controlWrite AND control[i];
		 /* Actualisation du registre,
		 si on doit écrire, on actualise le registre, sinon on garde son ancienne valeur */
		   for(j,0,31) {
		   	       dat[j] = MUX(w,datasIn[j], regs[i+j]);
			       regs[j+i] = REG dat[j];
		 }
		 
     /* Lecture des registres */
     array out1[32];
     array out2[32];
     out1[0..31] = Mux32to1s32(readReg1[5],regs[0..1023]);
     out2[0..31] = Mux32to1s32(readReg2[5],regs[0..1023]);
-> (out1[0..31],out2[0..31])
   

Alu1bit <-(a, b,less,ainvert, binvert, carryIn, operation[3])
	array out[32];
	a1 = MUX(ainvert, a, NOT a);   
	b1 = MUX(binvert, b, NOT b);
 	/* ALUOp */
	op0 = a1 AND b1;
	op1 = a1 OR b1;
	array op2[2];
	op2[0..1] = Fulladder<-(a1,b1,carryIn);
	out[0..0] = Mux8to1<-(operation[0..2],op0,op1,op2[0],false, false,false,less);
-> (out[0],op2[1])

Alulastbit <- (a, b,less,ainvert, binvert, carryIn, operation[3])
	array out[32];
	a1 = MUX(ainvert, a, NOT a);   
	b1 = MUX(binvert, b, NOT b);
 	/* ALUOp */
	op0 = a1 AND b1;
	op1 = a1 OR b1;
	array op2[2];
	op2[0..1] = Fulladder<-(a1,b1,carryIn);
	out[0..0] = Mux8to1<-(operation[0..3],op0,op1,op2[0],false, false,false,less);
->(out[0],op2[0])

Alu32bits <- (a[32],b[32],ainvert,binvert,carryIn,operation[3])
	  array carry[32];
	  array s[32];
	  array out0[2];
	  array out31[2];
	  
	  out0[0..1] = Alu1bit <- (a[0],b[0],out31[1],ainvert,binvert,carryIn,operation[0..2]);
	  
	  for(i,1,30){
		array out[2];
		out[0..1] = Alu1bit <- (a[i],b[i],false,ainvert,binvert,carry[i-1],operation[0..2]);
		carry[i] = out[1] AND true;
		s[i] = out[0];
		}
	  out31[0..1] = Alulastbit <- (a[31],a[31],false,ainvert,binvert,carry[30],operation[0..2]);
	  s[0] = out0[0] AND true;
	  s[31] = out31[0] AND true;
->(s[0..31])
	  
		

/* Unité arithmétique logique 1 bit */

ALU1 <- (a, b, less, ainvert, binvert, carryIn, operation[2]) {
     Invert inputs <-(a, b, ainvert, binvert)

     /* opérations de l'ALU */
     Andg land <-(inputs.[0], inputs.[1])
     Org lor <- (inputs.[0], inputs.[1])
     Fulladder adder <-(inputs.[0], inputs.[1], carryIn)
     


