Specifications du langage intermediaire compilateur-simulateur (LICS)

brouillon 0.1

1. Description générale

   Un programme est une liste d'assertions, exécutées linéairement. 
   Une Assertion est entièrement déterminée au moment de son execution.    
   Un programme est interprété par cycles successifs, ayant chacun des entrées et des sorties.

2. Assertion

   2.1. Variables.

   	Une Variable est un booléen. Elle est identifiée par un entier uniquen, notée n.
	les booléens sont notés "True" et "False". (utilité ?)
	
	Exemple :
		1 = True

   2.2. Fonctions logiques.
   
	LICS implémente les 4 primitives logiques usuelles : or, and, xor, not.
	La notation postfixée est utilisée.
	
	Exemple :
		1 = True
		2 = xor True 1
		3 = not 2

   2.3.	 Instructions d'entrée/sortie
   

	LICS fournit deux instructions, "input" et "output" permettant de marquer la variable comme étant une variable d'entrée ou une variable de sortie.	

	Exemple :
		1 = input
		2 = input
		3 = and 1 2

	ainsi que deux autres instructions "inputreg" et "outputreg" marquant la variable comme une entrée	  ou une sortie d'un registre.
	
	Exemple :
		1 = inputreg
		2 = input
		3 = not 1
		4 = or 3 2
		...
		4 = output
		2 = outputreg

      Attention ! 
      	l'ordre des instructions d'entrée/sortie est important.

   2.3. Syntaxe

   	Une assertion est la donnée d'une variable, d'une fonction et de
        ses arguments, l'opérateur d'assigement est '='.
	Notons que la syntaxe 2 = output est maladroite.
        Il n'y a pas de parsage, on communique par fichier binaire.
	
3. Structure

   Un programme commence par la definitions des entrées.
   Un programme finit par la définition des sorties.
   En fait, cet ordre n'est pas nécessaire. L'important est de n'utiliser
   que des variables précédemment définies.

   Exemple
        # entrées :
        1 = input
        2 = input
        3 = inputreg
        
        # Corps
        4 = or 1 2
        5 = and 4 1
        6 = xor 1 3
        7 = not 6
        
        # sorties
        7 = output
        5 = outputreg

3. Grammaire

cf lics-lib (sur dépôt github/Zimmi48)

