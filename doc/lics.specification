Specifications du langage intermediaire compilateur-simulateur (LICS) 

brouillon 0.1

1. Description générale

   Un programme est une liste d'assertions, exécutées linéairement. 
   Une Assertion est entièrement déterminée au moment de son execution.    
   Un programme est interprété par cycles successifs, ayant chacun des entrées et des sorties.

2. Assertion

   2.1. Variables.

   	Une Variable est un booléen. Elle est identifiée par un entier uniquen, notée n.
	les booléens sont notés "True" et "False". (utilité ?)
	
	Exemple :
		1 = True

   2.2. Fonctions logiques.
   
	LICS implémente les 4 primitives logiques usuelles : or, and, xor, not.
	La notation postfixée est utilisée.
	
	Exemple :
		1 = True
		2 = xor True 1
		3 = not 2

   2.3.	 Instructions d'entrée/sortie
   

	LICS fournit deux instructions, "input" et "output" permettant de marquer la variable comme étant une variable d'entrée ou une variable de sortie.	

	Exemple :
		1 = input
		2 = input
		3 = and 1 2

	ainsi que deux autres instructions "inputreg" et "outputreg" marquant la variable comme une entrée	  ou une sortie d'un registre.
	
	Exemple :
		1 = inputreg
		2 = input
		3 = not 1
		4 = or 3 2
		...
		4 = output
		2 = outputreg

      Attention ! 
      	l'ordre des instructions d'entrée/sortie est important.

   2.3. Mot-clé
        le mot clé onetime signifie que l'assertion peut n'être calculée
        qu'a pas la premiere passe.
        
        Exemple :
                1 = input
                2 = input
                onetime  3 = and 1 2  

   2.4. Syntaxe

   	Une assertion est la donnée d'une variable, d'une fonction et de ses arguments, l'opérateur d'assigement est '='.
	Notons que la syntaxe 2 = output est maladroite, mais peut être simplifiera le parsage. À voir…
	
	

3. Grammaire

type  programme = assertion list
type variable
type assertion = variable * expression

type expression = 
     True
     |False
     |fonction

type fonction = const |unaire | binaire

type const = 
     input 
     |inputreg
     |output
     |outputreg

type  unaire = Not of variable

type binaire = 
     Or of variable * variable
     |And of variable*variable
     |Xor of variable*variable





